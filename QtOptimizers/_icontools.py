from PyQt4 import QtGui
from os.path import join, normpath

import os
import struct
import imghdr


def _is_image_file(filename):
    '''
    return True if a path is a imagefile path
    '''
    exts = ['jpg', 'png', 'gif']
    return True if filename[-3:].lower() in exts else False


def _format_path_to_attribute_name(root, filename):
    '''
    format a file name path in a valid attribute name for the iconizer
    '''
    namised = normpath(filename)
    if namised[:len(root)] == normpath(root):
        namised = namised[len(root):]
    namised = namised.replace('\\', '.').replace(' ', '_')
    if namised[0] == '.':
        namised = namised[1:]
    namised = '.'.join(namised.split('.')[:-1])
    return namised


def _format_attribute_name_to_path(root, attribute):
    return normpath(join(root, attribute.replace('.', '\\')))


def _get_image_size(fname):
    '''
    Creator : draco
    Determine the image type of fhandle and return its size.
    '''
    with open(fname, 'rb') as fhandle:
        head = fhandle.read(24)
        if len(head) != 24:
            return
        if imghdr.what(fname) == 'png':
            check = struct.unpack('>i', head[4:8])[0]
            if check != 0x0d0a1a0a:
                return
            width, height = struct.unpack('>ii', head[16:24])
        elif imghdr.what(fname) == 'gif':
            width, height = struct.unpack('<HH', head[6:10])
        elif imghdr.what(fname) == 'jpeg':
            try:
                fhandle.seek(0)  # Read 0xff next
                size = 2
                ftype = 0
                while not 0xc0 <= ftype <= 0xcf:
                    fhandle.seek(size, 1)
                    byte = fhandle.read(1)
                    while ord(byte) == 0xff:
                        byte = fhandle.read(1)
                    ftype = ord(byte)
                    size = struct.unpack('>H', fhandle.read(2))[0] - 2
                # We are at a SOFn block
                fhandle.seek(1, 1)  # Skip `precision' byte.
                height, width = struct.unpack('>HH', fhandle.read(4))
            except Exception:  # IGNORE:W0703
                return
        else:
            return
        return width, height


class IconWithAutogeneratedModes(QtGui.QIcon):
    '''
    Creator : Carlo Giesa
    it's an icon, give a image path
    an high light version of the img auto generated
    !! Only working with PySide2 or PyQt5 !!
    '''

    def __init__(self, path=None):
        super(IconWithAutogeneratedModes, self).__init__(path)

        image = QtGui.QImage(path)
        active_image = QtGui.QImage(
            image.width(), image.height(), image.format())
        selected_image = QtGui.QImage(
            image.width(), image.height(), image.format())

        for i in range(image.width()):
            for j in range(image.height()):
                color = image.pixelColor(i, j)
                active_image.setPixelColor(i, j, color.lighter(120))
                selected_image.setPixelColor(i, j, color.lighter(80))

        active_pixmap = QtGui.QPixmap()
        active_pixmap.convertFromImage(active_image)
        self.addPixmap(active_pixmap, self.Active)

        selected_pixmap = QtGui.QPixmap()
        selected_pixmap.convertFromImage(selected_image)
        self.addPixmap(selected_pixmap, self.Selected)


class PreLoadedIcons(object):
    '''
    object containing all icons from a folder and subfolder
    param:: path = is the root where you want to check the files
    param:: size_limit = is the size over above which image not
            considered as icon
    '''

    def __init__(self, path, size_limit=256, auto_generate_icons_modes=False):
        self._auto_generate_icons_modes = auto_generate_icons_modes
        for root, _, files in os.walk(path):
            for filename in files:
                if not os.path.isdir(filename) and _is_image_file(filename):
                    icon_path = join(root, filename)
                    width, height = _get_image_size(icon_path)
                    if width > size_limit or height > size_limit:
                        continue
                    name = _format_path_to_attribute_name(path, icon_path)
                    print(name)
                    self.__setattr__(name, icon_path)

    def __getattribute__(self, name):
        value = object.__getattribute__(self, name)
        if isinstance(value, str):
            icon = self._generate_icons(value)
            self.__setattr__(name, icon)
            return icon
        else:
            return value

    def _generate_icons(self, path):
        if self._auto_generate_icons_modes:
            return IconWithAutogeneratedModes(path)
        else:
            return QtGui.QIcon(path)
